version: 2.1
executors:
  docker-publisher:
    environment:
      CLIENT_IMAGE_NAME: sterdirregistry.azure.io/sterilization-directory-client-fixed
      SERVER_IMAGE_NAME: sterdirregistry.azure.io/sterilization-directory-server
    docker:
      - image: cimg/base:2021.04
jobs:
  build-and-test:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose


      - run:
          name: Build images of services declared in docker-compose.yml
          command: |
            cd server && docker build -t $SERVER_IMAGE_NAME:latest . --build-arg DATABASE_PASSWORD_PROD=$DATABASE_PASSWORD_PROD --build-arg DATABASE_USERNAME_PROD=$DATABASE_USERNAME_PROD --build-arg DATABASE_HOSTNAME_PROD=$DATABASE_HOSTNAME_PROD --build-arg test=$test --build-arg DATABASE_NAME_PROD=$DATABASE_NAME_PROD --build-arg PASSPORT_SECRET=$PASSPORT_SECRET && cd .. && cd client && docker build -t $CLIENT_IMAGE_NAME:latest .
      - run:
          name: Run tests on server image
          command: |

            cd server && ls && docker run $SERVER_IMAGE_NAME:latest npm run test
      - run:
          name: Run tests on client image
          command: |
            cd client && ls && docker run $CLIENT_IMAGE_NAME:latest npm run test
      - run:
          name: Check docker images
          command: |
            docker images
      - run:
          name: Archive docker images
          command: |
            docker save -o server-image.tar $SERVER_IMAGE_NAME
            docker save -o client-image.tar $CLIENT_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./server-image.tar
            - ./client-image.tar

  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: |
            docker load -i /tmp/workspace/client-image.tar
            docker load -i /tmp/workspace/server-image.tar
      - run:
          name: Push Docker Images to Azure Container Registry
          command: |
            # Log in to Azure CLI with service principal credentials (ensure you set these in CircleCI environment variables)
            docker login $ACR_NAME -u $ACR_USERNAME -p $ACR_PASSWORD
            
            # Set Azure Container Registry info
            ACR_NAME=sterdirregistry.azurecr.io
            CLIENT_IMAGE_NAME=$ACR_NAME/sterilization-directory-client
            SERVER_IMAGE_NAME=$ACR_NAME/sterilization-directory-server

            # Increment version numbers (you may use your own logic here)
            CLIENT_IMAGE_TAG=$(date +"%Y%m%d%H%M%S")
            SERVER_IMAGE_TAG=$(date +"%Y%m%d%H%M%S")

            # Tag and push Docker images to Azure Container Registry
            docker tag $CLIENT_IMAGE_NAME:test $CLIENT_IMAGE_NAME:latest
            docker tag $SERVER_IMAGE_NAME:test $SERVER_IMAGE_NAME:latest
            docker push $CLIENT_IMAGE_NAME:latest
            docker push $SERVER_IMAGE_NAME:latest

            # Restart Azure App Services
            az webapp restart --name sterilizationdirectoryserver --resource-group SDResourceGroup
            az webapp restart --name sterilizationdirectoryclient --resource-group SDResourceGroup

workflows:
  build-master:
    jobs:
      - build-and-test:
          filters:
            branches:
              only: testing 
      - publish-latest:
          requires:
            - build-and-test
          filters:
            branches:
              only: testing